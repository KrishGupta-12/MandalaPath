/**
 * @fileoverview Firestore Security Rules for the Mandala Path application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and mandala progress,
 * while allowing public read access to mandala puzzles and cultural insights.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Mandala progress data is stored under `/users/{userId}/mandalaProgress/{mandalaId}`.
 * - Mandala puzzles are stored in the top-level `/mandalaPuzzles/{mandalaId}` collection.
 * - Cultural insights are stored in the top-level `/culturalInsights/{culturalInsightId}` collection.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and mandala progress.
 * - Mandala puzzles and cultural insights are publicly readable.
 * - Listing user documents is only allowed for the owner.
 * - No schema validation is performed in this prototyping phase, except for authorization-critical fields.
 *
 * Denormalization for Authorization:
 *  - User profile and progress data is nested under the user's ID to allow for simple `isOwner()` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can get their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user mandala progress data.
     * @path /users/{userId}/mandalaProgress/{mandalaId}
     * @allow (create) - User with UID 'user123' can create their progress at /users/user123/mandalaProgress/agni.
     * @allow (get) - User with UID 'user123' can get their progress at /users/user123/mandalaProgress/agni.
     * @allow (update) - User with UID 'user123' can update their progress at /users/user123/mandalaProgress/agni.
     * @allow (delete) - User with UID 'user123' can delete their progress at /users/user123/mandalaProgress/agni.
     * @deny (create) - User with UID 'user456' cannot create progress data at /users/user123/mandalaProgress/agni.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mandalaProgress/{mandalaId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to mandala puzzle data.
     * @path /mandalaPuzzles/{mandalaId}
     * @allow (get) - Any user can read mandala puzzle data.
     * @allow (list) - Any user can list mandala puzzles.
     * @deny (create) - No one can create mandala puzzles through the client.
     * @deny (update) - No one can update mandala puzzles through the client.
     * @deny (delete) - No one can delete mandala puzzles through the client.
     * @principle Allows public read access, restricts writes.
     */
    match /mandalaPuzzles/{mandalaId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to cultural insight data.
     * @path /culturalInsights/{culturalInsightId}
     * @allow (get) - Any user can read cultural insight data.
     * @allow (list) - Any user can list cultural insights.
     * @deny (create) - No one can create cultural insights through the client.
     * @deny (update) - No one can update cultural insights through the client.
     * @deny (delete) - No one can delete cultural insights through the client.
     * @principle Allows public read access, restricts writes.
     */
    match /culturalInsights/{culturalInsightId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}