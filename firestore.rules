/**
 * @fileoverview Firestore Security Rules for Mandala Path application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, allows public read access to mandala puzzles and cultural insights,
 * and restricts leaderboard entry creation to authenticated users. It prioritizes simplicity and performance by denormalizing
 * authorization data where necessary and avoiding costly `get()` calls within security rules.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data; access is restricted to the owning user.
 * - `/mandalaPuzzles/{mandalaId}`: Stores mandala puzzle data; publicly readable.
 * - `/culturalInsights/{culturalInsightId}`: Stores cultural insights data; publicly readable.
 * - `/leaderboardEntries/{leaderboardEntryId}`: Stores leaderboard entries; creation allowed for authenticated users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for the `/users` collection.
 * - Mandala puzzles and cultural insights are publicly readable.
 * - Leaderboard entries do not enforce ownership, allowing any authenticated user to create entries. Updates and deletes are disallowed.
 * - Read-only collections use `allow get, list: if true;`.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly used, as the rules rely on path-based ownership and public read access. If more complex authorization
 *   schemes were needed (e.g., shared access to puzzles), it would be necessary to denormalize user roles or permissions onto the relevant documents.
 *
 * Structural Segregation:
 * - User-specific data (profiles) is stored under `/users/{userId}`, while public data (puzzles, insights) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to a user's profile only to the user themselves.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if request.auth.uid == userId
     * @deny (get, create, update, delete, list): if request.auth.uid != userId
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to mandala puzzle data.  Write access is denied.
     * @path /mandalaPuzzles/{mandalaId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access with restricted writes.
     */
    match /mandalaPuzzles/{mandalaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to cultural insights data. Write access is denied.
     * @path /culturalInsights/{culturalInsightId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access with restricted writes.
     */
    match /culturalInsights/{culturalInsightId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create leaderboard entries, but prevents updates and deletes.
     * @path /leaderboardEntries/{leaderboardEntryId}
     * @allow (create): if isSignedIn()
     * @deny (get, list, update, delete): always
     * @principle Restricts writes to authenticated users.
     */
    match /leaderboardEntries/{leaderboardEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true; // TODO: Add proper get and list constraints

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}